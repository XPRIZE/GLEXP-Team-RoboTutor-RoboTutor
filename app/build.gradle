apply plugin: 'com.android.application'

android {

    compileSdkVersion rootProject.ext.rtCompileSdkVersion
    buildToolsVersion rootProject.ext.rtBuildToolsVersion
    defaultConfig {
        applicationId "cmu.xprize.robotutor"
        minSdkVersion rootProject.ext.rtMinSdkVersion
        targetSdkVersion rootProject.ext.rtTargetSdkVersion
        versionCode rootProject.ext.rtVersionCode
        versionName rootProject.ext.rtVersionName
        // default is signed by the Android default key

        multiDexEnabled true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Create a variable called keystorePropertiesFile, and initialize it to your
    // keystore.properties file, in the rootProject folder.
    def keystorePropertiesFile = rootProject.file("keystore.properties")

    // Initialize a new Properties() object called keystoreProperties
    def keystoreProperties = new Properties()

    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    signingConfigs {
        android {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {

        release {
            signingConfig signingConfigs.android
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }

        // This release includes the DEBUG selector and other various debug support features.
        //
        release_dbg {
            debuggable true
            signingConfig signingConfigs.android
        }

    }

    // define apk naming behavior
    // define apk naming behavior
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def project = "robotutor"
            def SEP = "."
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName

            def newApkName = project + SEP + buildType + SEP + version + ".apk"
            output.outputFile = new File(output.outputFile.parent, newApkName)
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:percent:25.2.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile project(':comp_banner')
    compile project(':comp_ltkplus')
    compile project(':util')
    compile project(':mn_component')
    compile project(':comp_listener')
    compile project(':comp_reading')
    compile project(':comp_questions')
    compile project(':sm_component')
    compile project(':fw_component')
    compile project(':nl_component')
    compile project(':comp_math')
    compile project(':comp_akira')
    compile project(':comp_bubblepop')
    compile project(':comp_writing')
    compile project(':comp_pointtap')
    compile project(path: ':comp_ask')
    compile project(path: ':comp_session')
    compile project(path: ':comp_debug')
    compile project(':comp_logging')
    compile project(path: ':comp_counting')
    compile project(path: ':comp_counting2')
    compile project(path: ':comp_numberscale')
    compile project(path: ':comp_nd')
    compile project(path: ':comp_picmatch')
    compile project(path: ':comp_bigmath')
    compile project(path: ':comp_spelling')

}

